package com.spring.JpaMysql.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.spring.JpaMysql.model.User;
import com.spring.JpaMysql.repository.UserRepository;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/") 
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@GetMapping(path="/all")
	//@ResponseBody
	public String getAllUsers(Model model) {
		// This returns a JSON or XML with the users
		model.addAttribute("users", userRepository.findAll());
		return "all";
	}
	
	@GetMapping(path="/find")
	public String getFInUser(@RequestParam(name="name",required=false, defaultValue="karim") String name, 
			@RequestParam(name="email",required=false, defaultValue="") String email, Model model) {
		model.addAttribute("users", userRepository.findByNameAndEmail(name, email));
		return "all";
	}
	/*
	@GetMapping(path="/find/{name}/{email}")
	public String getFInUser(@PathVariable String name, 
			@PathVariable String email, Model model) {
		model.addAttribute("users", userRepository.findByNameAndEmail(name, email));
		System.out.print("########################################################################################## "+name);
		System.out.print("########################################################################################## "+email);
		return "all";
	}
	*/

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

}